{"name": "test_SignUp_with_valid_otp[chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=114.0.5735.199)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x00B2A813+48355]\n\t(No symbol) [0x00ABC4B1]\n\t(No symbol) [0x009C5358]\n\t(No symbol) [0x009AD293]\n\t(No symbol) [0x00A0E37B]\n\t(No symbol) [0x00A1C473]\n\t(No symbol) [0x00A0A536]\n\t(No symbol) [0x009E82DC]\n\t(No symbol) [0x009E93DD]\n\tGetHandleVerifier [0x00D8AABD+2539405]\n\tGetHandleVerifier [0x00DCA78F+2800735]\n\tGetHandleVerifier [0x00DC456C+2775612]\n\tGetHandleVerifier [0x00BB51E0+616112]\n\t(No symbol) [0x00AC5F8C]\n\t(No symbol) [0x00AC2328]\n\t(No symbol) [0x00AC240B]\n\t(No symbol) [0x00AB4FF7]\n\tBaseThreadInitThunk [0x75747BA9+25]\n\tRtlInitializeExceptionChain [0x77B0BC5B+107]\n\tRtlClearBits [0x77B0BBDF+191]", "trace": "self = <TestCases.test_SSO.Test_SSO object at 0x000001898A4AF0D0>, get_browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"fdcf5e903282c256c11cf8ad1357df31\")>\n\n    def test_SignUp_with_valid_otp(self, get_browser):\n    \n        # Initialization\n        driver = get_browser\n        Home = HomePage(driver)\n        RokomariXUTIL=Rokomari(driver)\n        signup_mail =RC(\"Auth\",\"signin_up\")\n    \n        # Navigation\n        Home.\\\n            navigation_to_signin_signup().\\\n            sign_up_valid(signup_mail)\n    \n        # Assertion\n        expected_page_title=\"Buy Book Online - Best Online Book Shop in Bangladesh | Rokomari.com\"\n>       assert RokomariXUTIL.rok_page_title() == expected_page_title,\"OTP Unsuccessfull\"\n\ntest_SSO.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\Pages\\Rokomari.py:25: in rok_page_title\n    return self.driver.title\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:365: in title\n    return self.execute(Command.GET_TITLE).get(\"value\", \"\")\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001898A4DCEE0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...dInitThunk [0x75747BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x77B0BC5B+107]\\\\n\\\\tRtlClearBits [0x77B0BBDF+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=114.0.5735.199)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x00B2A813+48355]\nE       \t(No symbol) [0x00ABC4B1]\nE       \t(No symbol) [0x009C5358]\nE       \t(No symbol) [0x009AD293]\nE       \t(No symbol) [0x00A0E37B]\nE       \t(No symbol) [0x00A1C473]\nE       \t(No symbol) [0x00A0A536]\nE       \t(No symbol) [0x009E82DC]\nE       \t(No symbol) [0x009E93DD]\nE       \tGetHandleVerifier [0x00D8AABD+2539405]\nE       \tGetHandleVerifier [0x00DCA78F+2800735]\nE       \tGetHandleVerifier [0x00DC456C+2775612]\nE       \tGetHandleVerifier [0x00BB51E0+616112]\nE       \t(No symbol) [0x00AC5F8C]\nE       \t(No symbol) [0x00AC2328]\nE       \t(No symbol) [0x00AC240B]\nE       \t(No symbol) [0x00AB4FF7]\nE       \tBaseThreadInitThunk [0x75747BA9+25]\nE       \tRtlInitializeExceptionChain [0x77B0BC5B+107]\nE       \tRtlClearBits [0x77B0BBDF+191]\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "attachments": [{"name": "log", "source": "725ddad2-c37f-4bda-b6f5-5fea0c0d728d-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "get_browser", "value": "'chrome'"}], "start": 1696848852174, "stop": 1696848882111, "uuid": "71b2ded4-e3c8-4ce0-8f4d-fb620cb26c2c", "historyId": "c7787d215307dfa34561a70245db7f88", "testCaseId": "52966c360b1bcb6f0f0fe26fec1bf5e6", "fullName": "test_SSO.Test_SSO#test_SignUp_with_valid_otp", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('log_on_failure', 'get_browser')"}, {"name": "suite", "value": "test_SSO"}, {"name": "subSuite", "value": "Test_SSO"}, {"name": "host", "value": "CYREX-x-CYREX"}, {"name": "thread", "value": "1544-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_SSO"}]}